<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>Newest Python PEPs</title>
    <link>https://peps.python.org/</link>
    <description>Newest Python Enhancement Proposals (PEPs): Information on new language features and some meta-information like release procedure and schedules.</description>
    <atom:link href="https://peps.python.org/peps.rss" rel="self"/>
    <docs>https://cyber.harvard.edu/rss/rss.html</docs>
    <language>en</language>
    <lastBuildDate>Sun, 20 Oct 2024 16:27:19 GMT</lastBuildDate>
    <item>
      <title>PEP 762: REPL-acing the default REPL</title>
      <link>https://peps.python.org/pep-0762/</link>
      <description>One of Python’s core strengths is its interactive mode, also known as the Read-Eval-Print Loop (REPL), or the Python console, or the Python shell. This PEP describes the new implementation of this functionality written in Python. The new REPL released in Python 3.13 aims to provide modern features expected by today’s users, such as multi-line editing, syntax highlighting, custom commands, and an overall improved interactive experience.</description>
      <author>Pablo Galindo Salgado (pablogsal@python.org), Łukasz Langa (lukasz@python.org), Lysandros Nikolaou (lisandrosnik@gmail.com), Emily Morehouse-Valcarcel (emily@python.org)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0762/</guid>
      <pubDate>Fri, 11 Oct 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 777: How to Re-invent the Wheel</title>
      <link>https://peps.python.org/pep-0777/</link>
      <description>The current wheel 1.0 specification was written over a decade ago, and has been extremely robust to changes in the Python packaging ecosystem. Previous efforts to improve the wheel specification were deferred to focus on other packaging specifications. Meanwhile, the use of wheels has changed dramatically in the last decade. There have been many requests for new wheel features over the years; however, a fundamental obstacle to evolving the wheel specification has been that there is no defined process for how to handle adding backwards-incompatible features to wheels. Therefore, to enable other PEPs to describe new enhancements to the wheel specification, this PEP prescribes compatibility requirements on future wheel revisions. This PEP does not specify a new wheel revision. The specification of a new wheel format (“Wheel 2.0”) is left to a future PEP.</description>
      <author>Ethan Smith (ethan@ethanhs.me)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0777/</guid>
      <pubDate>Wed, 09 Oct 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 761: Deprecating PGP signatures for CPython artifacts</title>
      <link>https://peps.python.org/pep-0761/</link>
      <description>Since Python 3.11.0, CPython has provided two verifiable digital signatures for all CPython artifacts: PGP and Sigstore.</description>
      <author>Seth Michael Larson (seth@python.org)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0761/</guid>
      <pubDate>Tue, 08 Oct 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 760: No More Bare Excepts</title>
      <link>https://peps.python.org/pep-0760/</link>
      <description>This PEP proposes disallowing bare except: clauses in Python’s exception-handling syntax. Currently, Python allows catching all exceptions with a bare except: clause, which can lead to overly broad exception handling and mask important errors. This PEP suggests requiring explicit exception types in all except clauses, promoting more precise and intentional error handling.</description>
      <author>Pablo Galindo (pablogsal@python.org), Brett Cannon (brett@python.org)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0760/</guid>
      <pubDate>Wed, 02 Oct 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 759: External Wheel Hosting</title>
      <link>https://peps.python.org/pep-0759/</link>
      <description>This PEP proposes a mechanism by which projects hosted on pypi.org can safely host wheel artifacts on external sites other than PyPI. This PEP explicitly does not propose external hosting of projects, packages, or their metadata. That functionality is already available by externally hosting independent package indexes. Because this PEP only provides a mechanism for projects to customize the download URL for specific released wheel artifacts, dependency resolution as already implemented by common installer tools such as pip and uv does not need to change.</description>
      <author>Barry Warsaw (barry@python.org), Ethan Smith (ethan@ethanhs.me)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0759/</guid>
      <pubDate>Tue, 01 Oct 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 758: Allow ``except`` and ``except*`` expressions without parentheses</title>
      <link>https://peps.python.org/pep-0758/</link>
      <description>This PEP 1 proposes to allow unparenthesized except and except* blocks in Python’s exception handling syntax only when not using the as clause. Currently, when catching multiple exceptions, parentheses are required around the exception types. This was a Python 2 remnant. This PEP suggests allowing the omission of these parentheses, simplifying the syntax, making it more consistent with other parts of the syntax that make parentheses optional, and improving readability in certain cases.</description>
      <author>Pablo Galindo (pablogsal@python.org), Brett Cannon (brett@python.org)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0758/</guid>
      <pubDate>Mon, 30 Sep 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 757: C API to import-export Python integers</title>
      <link>https://peps.python.org/pep-0757/</link>
      <description>Add a new C API to import and export Python integers, int objects: especially PyLongWriter_Create() and PyLong_Export() functions.</description>
      <author>Sergey B Kirpichev (skirpichev@gmail.com), Victor Stinner (vstinner@python.org)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0757/</guid>
      <pubDate>Fri, 13 Sep 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 756: Add PyUnicode_Export() and PyUnicode_Import() C functions</title>
      <link>https://peps.python.org/pep-0756/</link>
      <description>Add functions to the limited C API version 3.14:</description>
      <author>Victor Stinner (vstinner@python.org)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0756/</guid>
      <pubDate>Fri, 13 Sep 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 755: Implicit namespace policy for PyPI</title>
      <link>https://peps.python.org/pep-0755/</link>
      <description>This PEP codifies an implementation of PEP 752 for PyPI 1.</description>
      <author>Ofek Lev (ofekmeister@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0755/</guid>
      <pubDate>Thu, 05 Sep 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 753: Uniform project URLs in core metadata</title>
      <link>https://peps.python.org/pep-0753/</link>
      <description>This PEP recommends two discrete changes to the processing of core metadata by indices (such as PyPI) and other core metadata consumers:</description>
      <author>William Woodruff (william@yossarian.net), Facundo Tuesca (facundo.tuesca@trailofbits.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0753/</guid>
      <pubDate>Thu, 29 Aug 2024 00:00:00 GMT</pubDate>
    </item>
  </channel>
</rss>
